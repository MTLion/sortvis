#!/usr/bin/env python
import random, math, sys
from optparse import OptionParser
from libsortvis import sortable, graph


def main():
    usage = "usage: %prog [options]"
    parser = OptionParser(usage)
    parser.add_option(
        "-a",
        dest="algorithm",
        default=[],
        type="choice",
        action="append",
        choices=[i.name for i in sortable.algorithms],
        help="Draw only a named algorithm."
    )
    parser.add_option(
        "-n",
        dest="numelements",
        default="512",
        type="int",
        help="Generate a random sorting sequence of length n"
    )
    parser.add_option(
        "-f",
        dest="readfile",
        help="Read data from file"
    )
    parser.add_option(
        "-g",
        dest="grayscale",
        default = False,
        action="store_true",
    )
    parser.add_option(
        "-o",
        dest="ofname",
        help="Output file name. Only usable when a single algorithm is being drawn.",
        default=""
    )
    parser.add_option(
        "-d",
        dest="dump",
        default=False,
        action="store_true",
        help="Dump sequence"
    )
    parser.add_option(
        "-p",
        dest="printout",
        default=False,
        action="store_true",
        help="Print traversal rather than drawing graph"
    )
    parser.add_option(
        "-t",
        dest="title",
        default=False,
        action="store_true",
        help="Add a title to image."
    )
    parser.add_option(
        "-u",
        dest="unmoved",
        default=True,
        action="store_false",
        help="Don't draw elements until they move."
    )
    parser.add_option(
        "-v",
        dest="verbose",
        default=False,
        action="store_true",
        help="Be verbose."
    )
    parser.add_option(
        "-e",
        dest="prefix",
        help="Output file name prefix.",
        default=""
    )

    parser.add_option(
        "--background",
        dest="background",
        type="str",
        default="ffffff",
        help="Background colour."
    )

    options, args = parser.parse_args()
    if args:
        parser.error("Script takes no arguments.")
    if options.readfile:
        txt = file(options.readfile).read().split()
        lst = [int(i) for i in txt]
    else:
        lst = range(options.numelements)
        random.shuffle(lst)
    if options.dump:
        for i in lst:
            print i,

    try:
        background = graph.rgb(options.background)
    except ValueError, v:
        parser.error("Invalid background - " + str(v))

    if options.grayscale:
        ldrawer = graph.DenseGrayscale(20, background)
    else:
        ldrawer = graph.DenseFruitsalad(20, background)
    if options.algorithm:
        selected = [i.lower() for i in options.algorithm]

    if options.algorithm:
        todraw = [i for i in sortable.algorithms if i.name in options.algorithm]
    else:
        todraw = [i for i in sortable.algorithms]

    if options.ofname and len(todraw) > 1:
        parser.error("Cannot specify output file name when drawing more than one algorithm.")

    for i in todraw:
        a = i()
        if options.ofname:
            name = options.prefix + options.ofname
        else:
            name = options.prefix + a.name + ".png"
        if options.verbose:
            print name
        sortd = a(lst)
        if options.printout:
            print a.name
            for i in sortd:
                print i.path
        ldrawer.draw(
            sortd,
            a.name if options.title else None,
            name,
            options.unmoved
        )


if __name__ == "__main__":
    main()
