#!/usr/bin/env python
import random, math, sys
from optparse import OptionParser
from libsortvis import sortable, graph


def main():
    usage = "usage: %prog [options]"
    parser = OptionParser(usage)
    parser.add_option(
        "-a",
        dest="algorithm",
        default=[],
        type="choice",
        action="append",
        choices=[i.name for i in sortable.algorithms],
        help="Draw only a named algorithm."
    )
    parser.add_option(
        "-n",
        dest="numelements",
        default="20",
        type="int",
        help="Generate a random sorting sequence of length n"
    )
    parser.add_option(
        "-f",
        dest="readfile",
        help="Read data from file"
    )
    parser.add_option(
        "-o",
        dest="ofname",
        help="Output file name. Only usable when a single algorithm is being drawn.",
        default=""
    )
    parser.add_option(
        "-d",
        dest="dump",
        default=False,
        action="store_true",
        help="Dump sequence"
    )
    parser.add_option(
        "-x",
        dest="width",
        type="int",
        default=None,
        help="Image width"
    )
    parser.add_option(
        "-y",
        dest="height",
        type="int",
        default=None,
        help="Image height"
    )
    parser.add_option(
        "-l",
        dest="line",
        type="int",
        default=6,
        help="Total line width"
    )
    parser.add_option(
        "-b",
        dest="border",
        type="int",
        default=1,
        help="Border width"
    )
    parser.add_option(
        "-r",
        dest="rotate",
        default=False,
        action="store_true",
        help="Rotate images 90 degrees"
    )
    parser.add_option(
        "-i",
        dest="highlight",
        type="int",
        default=[],
        action="append",
        help="Highlight digit N (0-based). Can be passed muiltiple times."
    )
    options, args = parser.parse_args()
    if args:
        parser.error("Script takes no arguments.")
    if options.readfile:
        txt = file(options.readfile).read().split()
        lst = [int(i) for i in txt]
    else:
        lst = range(options.numelements)
        random.shuffle(lst)
    if options.highlight:
        if max(options.highlight) > (len(lst)-1):
            parser.error("Highlight element > than list length.")
    if options.dump:
        for i in lst:
            print i,

    if not options.height:
        options.height = (options.line + options.border + 5) * len(lst)

    if not options.width:
        options.width = int(options.height * 3)

    ldrawer = graph.PathDrawer(
        options.width,
        options.height,
        options.line,
        options.border,
        options.highlight,
    )
    if options.algorithm:
        selected = [i.lower() for i in options.algorithm]

    if options.algorithm:
        todraw = [i for i in sortable.algorithms if i.name in options.algorithm]
    else:
        todraw = [i for i in sortable.algorithms]

    if options.ofname and len(todraw) > 1:
        parser.error("Cannot specify output file name when drawing more than one algorithm.")

    for i in todraw:
        a = i()
        sortd = a(lst)
        ldrawer.draw(sortd, a.name, options.ofname or a.name, options.rotate)


if __name__ == "__main__":
    main()
